CHIP A6Q2201836198{
    IN a, b, c, d;
    OUT f;

    PARTS:
    // Intermediate terms fOr minimization
    Not(in=a, out=Nota);
    Not(in=b, out=Notb);
    Not(in=c, out=Notc);
    Not(in=d, out=Notd);

    // Grouping terms to minimize gates
    And(a=Nota, b=Notb, c=Notc, d=d, out=term1);      // ¬a∧¬b∧¬c∧d
    And(a=Nota, b=Notb, c=c, d=Notd, out=term2);       // ¬a∧¬b∧c∧¬d
    And(a=Nota, b=b, c=c, d=d, out=term3);             // ¬a∧b∧c∧d
    And(a=a, b=Notb, c=Notc, d=d, out=term4);          // a∧¬b∧¬c∧d
    And(a=a, b=Notb, c=c, d=Notd, out=term5);          // a∧¬b∧c∧¬d
    And(a=a, b=b, c=Notc, d=d, out=term6);             // a∧b∧¬c∧d

    // Combine all terms using Or gates (can be optimized further if multi-input Or is allowed)
    Or(a=term1, b=term2, out=Or1);
    Or(a=Or1, b=term3, out=Or2);
    Or(a=Or2, b=term4, out=Or3);
    Or(a=Or3, b=term5, out=Or4);
    Or(a=Or4, b=term6, out=f);
}